{"version":3,"sources":["components/Navbar.js","context/alert/alertContext.js","context/github/githubcontext.js","components/Search.js","components/Card.js","pages/Home.js","pages/About.js","components/Repos.js","pages/Profile.js","components/Alert.js","context/alert/alertReducer.js","context/alert/alertState.js","context/github/githubReducer.js","context/github/githubstate.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","exact","to","AlertContext","createContext","GithubContext","Search","useState","value","setValue","alert","useContext","github","type","placeholder","onKeyPress","event","key","clearUsers","trim","search","hide","show","onChange","target","Card","user","src","avatar_url","alt","login","Home","loading","users","Fragment","map","id","About","Repos","repos","repo","href","html_url","rel","name","Profile","match","getUser","getRepos","urlName","params","useEffect","company","location","bio","blog","followers","following","public_repos","public_gists","style","width","Alert","role","text","aria-label","aria-hidden","handlers","state","action","payload","AlertReducer","default","AlertState","children","useReducer","dispatch","Provider","GithubReducer","withCreds","url","process","GithubState","a","setLoading","Axios","get","response","data","items","App","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAGaA,EAAS,WAClB,OACI,yBAAKC,UAAU,+CACX,yBAAKA,UAAY,gBAAjB,iBAGA,wBAAIA,UAAY,cACZ,wBAAIA,UAAY,YACZ,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIF,UAAY,YAAlC,SAEJ,wBAAIA,UAAY,YACZ,kBAAC,IAAD,CAASE,GAAG,SAASF,UAAY,YAAjC,Y,QCZPG,EAAeC,0BCAfC,EAAgBD,0BCEhBE,EAAS,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,KAElBC,EAAQC,qBAAWR,GACnBS,EAASD,qBAAWN,GAc1B,OACI,yBAAKL,UAAY,cACb,2BAAOa,KAAK,OAAOb,UAAU,eACzBc,YAAY,qBACZC,WAhBK,SAACC,GACI,UAAdA,EAAMC,MAGVL,EAAOM,aACHV,EAAMW,QACNP,EAAOQ,OAAOZ,EAAMW,QACpBT,EAAMW,QAENX,EAAMY,KAAK,qBAQPd,MAAOA,EACPe,SAAY,SAAAP,GAAK,OAAIP,EAASO,EAAMQ,OAAOhB,YCxB9CiB,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,OACI,yBAAK1B,UAAY,QACb,yBAAK2B,IAAOD,EAAKE,WAAYC,IAAKH,EAAKI,MAAO9B,UAAY,iBAC1D,yBAAKA,UAAY,aACb,wBAAIA,UAAY,cAAc0B,EAAKI,OACnC,kBAAC,IAAD,CAAM5B,GAAI,YAAcwB,EAAKI,MAAO9B,UAAY,gBAAhD,gBCJH+B,EAAO,WAAO,IAAD,EACKpB,qBAAWN,GAA9B2B,EADc,EACdA,QAASC,EADK,EACLA,MACjB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,MACA,yBAAKlC,UAAU,OACVgC,EACK,uBAAGhC,UAAU,eAAb,cACAiC,EAAME,KAAI,SAACT,GAAD,OACJ,yBAAK1B,UAAU,gBAAgBiB,IAAKS,EAAKU,IACrC,kBAAC,EAAD,CAAMV,KAAOA,WCbhCW,EAAQ,WACjB,OACI,6BACI,yBAAKrC,UAAU,aACX,wBAAIA,UAAU,aAAd,kBACA,uBAAGA,UAAU,QAAb,yCCLHsC,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACjB,kBAAC,IAAML,SAAP,KACKK,EAAMJ,KAAI,SAAAK,GAAI,OACX,yBAAKxC,UAAY,YAAYiB,IAAOuB,EAAKJ,IACrC,yBAAKpC,UAAY,aACb,4BACI,uBAAGyC,KAAQD,EAAKE,SAAUlB,OAAS,SAC3BmB,IAAI,uBAAuBH,EAAKI,cCJnDC,EAAU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACkBnC,qBAAWN,GAAvD0C,EAD0B,EAC1BA,QAASC,EADiB,EACjBA,SAAUhB,EADO,EACPA,QAASN,EADF,EACEA,KAAMa,EADR,EACQA,MACpCU,EAAUH,EAAMI,OAAON,KAQ7B,GANAO,qBAAU,WACNJ,EAAQE,GACRD,EAASC,KAEV,IAECjB,EACA,OAAO,uBAAGhC,UAAU,eAAb,cAXuB,IAa3B4C,EACkElB,EADlEkB,KAAMQ,EAC4D1B,EAD5D0B,QAASxB,EACmDF,EADnDE,WAAYyB,EACuC3B,EADvC2B,SAAUC,EAC6B5B,EAD7B4B,IAAKC,EACwB7B,EADxB6B,KAC7CzB,EAAqEJ,EAArEI,MAAOY,EAA8DhB,EAA9DgB,SAAUc,EAAoD9B,EAApD8B,UAAWC,EAAyC/B,EAAzC+B,UAAWC,EAA8BhC,EAA9BgC,aAAcC,EAAgBjC,EAAhBiC,aACzD,OACI,kBAAC,IAAMzB,SAAP,KACI,kBAAC,IAAD,CAAMhC,GAAG,IAAIF,UAAU,gBAAvB,aAEA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACX,yBAAK2B,IAAOC,EAAYC,IAAOe,EAC3BgB,MAAS,CAACC,MAAO,WACrB,4BAAKjB,GACJS,GAAY,wCAAcA,IAE/B,yBAAKrD,UAAY,OAETsD,GAAO,kBAAC,IAAMpB,SAAP,KACH,mCACA,2BAAIoB,IAGZ,uBAAGb,KAAMC,EACLlB,OAAS,SACTmB,IAAI,sBACJ3C,UAAY,gBAHhB,mBAIA,4BACK8B,GAAS,4BACN,8CADM,IACuBA,GAEhCsB,GAAW,4BACR,6CADQ,IACoBA,GAE/BG,GAAQ,4BACL,6CADK,IACuBA,IAGpC,yBAAKvD,UAAY,oBAAjB,cACoBwD,GAEpB,yBAAKxD,UAAY,oBAAjB,cACoByD,GAEpB,yBAAKzD,UAAY,oBAAjB,iBACuB0D,GAEvB,yBAAK1D,UAAY,oBAAjB,UACgB2D,OAMhC,kBAAC,EAAD,CAAOpB,MAASA,M,OCpEfuB,EAAQ,WAAO,IACjBpD,EAASC,qBAAWR,GAApBO,MACP,OAAKA,EAED,yBAAKV,UAAS,sBAAiBU,EAAMG,MAAQ,YAA/B,sBAAgEkD,KAAK,SAC9ErD,EAAMsD,KACP,4BAAQnD,KAAK,SAASb,UAAU,QAAQiE,aAAW,SACnD,0BAAMC,cAAY,QAAlB,UALW,M,OCFjBC,GAAQ,mBAHY,cAIR,SAACC,EAAOC,GAAR,OAAmBA,EAAOC,WAD9B,cAFY,cAIR,kBAAM,QAFV,yBAGD,SAAAF,GAAK,OAAIA,KAHR,GAMDG,EAAe,SAACH,EAAOC,GAEhC,OADgBF,EAASE,EAAOxD,OAASsD,EAASK,SACnCJ,EAAOC,ICPbI,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACdC,qBAAWJ,EAAc,MADX,mBACjCH,EADiC,KAC1BQ,EAD0B,KAWxC,OACI,kBAACzE,EAAa0E,SAAd,CAAuBrE,MAAS,CAC5Ba,KAVK,kBAAMuD,EAAS,CAAE/D,KDNR,gBCgBRS,KATD,SAAC0C,GAA8B,IAAxBnD,EAAuB,uDAAhB,YACvB+D,EAAS,CACL/D,KDVc,aCWdyD,QAAS,CAACzD,OAAMmD,WAMJtD,MAAO0D,IAElBM,I,iCCbPP,GAAQ,mBANa,eAOR,SAACC,GAAD,sBACRA,EADQ,CAEXnC,MAAO,GACPD,SAAS,OAJH,cALW,aAWR,SAACoC,EAAD,OAASE,EAAT,EAASA,QAAT,sBACNF,EADM,CAET7B,MAAO+B,EACPtC,SAAS,OATH,cAJU,YAeR,SAACoC,EAAD,OAASE,EAAT,EAASA,QAAT,sBACLF,EADK,CAER1C,KAAM4C,EACNtC,SAAS,OAdH,cAHc,gBAmBR,SAACoC,EAAD,OAASE,EAAT,EAASA,QAAT,sBACTF,EADS,CAEZnC,MAAOqC,EACPtC,SAAS,OAnBH,cAFa,eAuBR,SAACoC,GAAD,sBACRA,EADQ,CAEXpC,SAAS,OAvBH,yBAyBD,SAAAoC,GAAK,OAAIA,KAzBR,GA4BDU,EAAgB,SAACV,EAAOC,GAEjC,OADgBF,EAASE,EAAOxD,OAASsD,EAASK,SACnCJ,EAAOC,I,iBC7BpBU,EAAY,SAACC,GACf,MAAM,GAAN,OAAUA,EAAV,qBAHcC,uBAGd,0BAFkBA,6CAKTC,EAAc,SAAC,GAAgB,IAAfR,EAAc,EAAdA,SAAc,EAObC,qBAAWG,EANhB,CACjBpD,KAAM,GACNO,MAAO,GACPD,SAAS,EACTO,MAAO,KAL4B,mBAOhC6B,EAPgC,KAOzBQ,EAPyB,KASjCxD,EAAM,uCAAI,WAAMZ,GAAN,eAAA2E,EAAA,6DACZC,IADY,SAEWC,IAAMC,IAAIP,EAAU,yCAAD,OAA0CvE,EAA1C,OAF9B,OAEN+E,EAFM,OAGZX,EAAS,CACL/D,KDrBgB,eCsBhByD,QAASiB,EAASC,KAAKC,QALf,2CAAJ,sDAQN1C,EAAO,uCAAG,WAAMH,GAAN,eAAAuC,EAAA,6DACZC,IADY,SAEWC,IAAMC,IAAIP,EAAU,gCAAD,OAAiCnC,EAAjC,OAF9B,OAEN2C,EAFM,OAGZX,EAAS,CACL/D,KD9BY,WC+BZyD,QAASiB,EAASC,OALV,2CAAH,sDAQPxC,EAAQ,uCAAG,WAAMJ,GAAN,eAAAuC,EAAA,6DACbC,IADa,SAEUC,IAAMC,IAAIP,EAAU,gCAAD,OAAiCnC,EAAjC,wBAF7B,OAEP2C,EAFO,OAGbX,EAAS,CACL/D,KDvCa,YCwCbyD,QAASiB,EAASC,OALT,2CAAH,sDAaRJ,EAAa,WACfR,EAAS,CACL/D,KD/Ce,iBCkDhBa,EAA+B0C,EAA/B1C,KAAMO,EAAyBmC,EAAzBnC,MAAOM,EAAkB6B,EAAlB7B,MAAOP,EAAWoC,EAAXpC,QAC3B,OACI,kBAAC3B,EAAcwE,SAAf,CAAwBrE,MAAO,CAC3BY,SAAQ4B,WAAUD,UAAS7B,WAbhB,WACf0D,EAAS,CACL/D,KD9Ce,iBCyDwBuE,aAAY1D,OAAMO,QAAOM,QAAOP,YAEtE0C,IC7BEgB,MApBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAK1F,UAAU,kBACb,kBAAC,EAAD,CAAOU,MAAO,CAAEsD,KAAM,iBACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,KAAK,IAAI1F,OAAK,EAAC2F,UAAW7D,IACjC,kBAAC,IAAD,CAAO4D,KAAK,SAASC,UAAWvD,IAChC,kBAAC,IAAD,CAAOsD,KAAK,iBAAiBC,UAAW/C,UCTlCgD,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASjD,MACvB,2DCZNkD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7da19a88.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n            <div className = \"navbar-brand\">\r\n                GitHub Search\r\n            </div>\r\n            <ul className = \"navbar-nav\">\r\n                <li className = \"nav-item\">\r\n                    <NavLink exact to=\"/\" className = \"nav-link\">Main</NavLink>\r\n                </li>\r\n                <li className = \"nav-item\">\r\n                    <NavLink to=\"/about\" className = \"nav-link\">Info</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import {createContext} from 'react'\r\n\r\nexport const AlertContext = createContext()","import {createContext} from 'react'\r\n\r\nexport const GithubContext = createContext()","import React, { useContext, useState } from 'react' \r\nimport { AlertContext } from '../context/alert/alertContext'\r\nimport { GithubContext } from '../context/github/githubcontext'\r\n\r\nexport const Search = () => {\r\n    const [value, setValue] = useState('')\r\n    const alert = useContext(AlertContext)\r\n    const github = useContext(GithubContext)\r\n\r\n    const onSubmit = (event) => {\r\n        if (event.key !== 'Enter') {\r\n            return\r\n        }\r\n        github.clearUsers()\r\n        if (value.trim()) {\r\n            github.search(value.trim())\r\n            alert.hide()\r\n        } else {\r\n            alert.show('Enter something')\r\n        }\r\n    }\r\n    return (\r\n        <div className = \"form-group\">\r\n            <input type=\"text\" className=\"form-control\"\r\n                placeholder=\"Enter an user nick\"\r\n                onKeyPress={onSubmit}\r\n                value={value}\r\n                onChange = {event => setValue(event.target.value)}>\r\n            </input>\r\n        </div>\r\n    )\r\n}","import React from 'react' \r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Card = ({user}) => {\r\n    return (\r\n        <div className = \"card\">\r\n            <img src = {user.avatar_url} alt={user.login} className = \"card-img-top\" />\r\n            <div className = \"card-body\">\r\n                <h5 className = \"card-title\">{user.login}</h5>\r\n                <Link to={`/profile/` + user.login} className = \"btn btn-dark\">More info</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport { Search } from '../components/Search'\r\nimport { Card } from '../components/Card'\r\nimport { GithubContext } from '../context/github/githubcontext'\r\n\r\nexport const Home = () => {\r\n    const { loading, users } = useContext(GithubContext)\r\n    return (\r\n        <React.Fragment>\r\n            <Search />\r\n            <div className=\"row\">\r\n                {loading\r\n                    ? <p className=\"text-center\">Loading...</p>\r\n                    : users.map((user) => (\r\n                            <div className=\"col-sm-4 mb-4\" key={user.id}>\r\n                                <Card user={ user } />\r\n                            </div>\r\n                        )\r\n                    )\r\n                }\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const About = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">About this app</h1>\r\n                <p className=\"lead\">React Hooks and Bootstrap learning</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Repos = ({repos}) => (\r\n    <React.Fragment>\r\n        {repos.map(repo => (\r\n            <div className = \"card mb-3\" key = {repo.id}>\r\n                <div className = \"card-body\">\r\n                    <h5>\r\n                        <a href = {repo.html_url} target = \"_blank\" \r\n                                rel=\"noopener noreferrer\">{repo.name}</a>\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n        ))}\r\n    </React.Fragment>\r\n)","import React, { useContext, useEffect } from 'react'\r\nimport { GithubContext } from '../context/github/githubcontext'\r\nimport { Link } from 'react-router-dom'\r\nimport { Repos } from './../components/Repos'\r\n\r\nexport const Profile = ({ match }) => {\r\n    const { getUser, getRepos, loading, user, repos } = useContext(GithubContext)\r\n    const urlName = match.params.name\r\n\r\n    useEffect(() => {\r\n        getUser(urlName)\r\n        getRepos(urlName)\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <p className=\"text-center\">Loading...</p>\r\n    }\r\n    const {name, company, avatar_url, location, bio, blog, \r\n        login, html_url, followers, following, public_repos, public_gists} = user\r\n    return (\r\n        <React.Fragment>\r\n            <Link to=\"/\" className=\"btn btn-link\">Main page</Link>\r\n\r\n            <div className=\"card mb-4\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-3 text-center\">\r\n                            <img src = {avatar_url} alt = {name}\r\n                                style = {{width: '150px'}} />\r\n                            <h1>{name}</h1>\r\n                            {location && <p>Location: {location}</p>}\r\n                        </div>\r\n                        <div className = \"col\">\r\n                            {\r\n                                bio && <React.Fragment>\r\n                                    <h3>Bio</h3>\r\n                                    <p>{bio}</p>\r\n                                </React.Fragment>\r\n                            }\r\n                            <a href={html_url} \r\n                                target = \"_blank\" \r\n                                rel=\"noopener noreferrer\"\r\n                                className = \"btn btn-dark\">To profile page</a>\r\n                            <ul>\r\n                                {login && <li>\r\n                                    <strong>Username: </strong> {login}\r\n                                </li>}\r\n                                {company && <li>\r\n                                    <strong>Company: </strong> {company}\r\n                                </li>}\r\n                                {blog && <li>\r\n                                    <strong>Website: </strong> {blog}\r\n                                </li>}\r\n                            </ul>\r\n                            <div className = \"badge badge-dark\">\r\n                                    Followers: {followers}\r\n                            </div>\r\n                            <div className = \"badge badge-dark\">\r\n                                    Follwoing: {following}\r\n                            </div>\r\n                            <div className = \"badge badge-dark\">\r\n                                    Repositories: {public_repos}\r\n                            </div>\r\n                            <div className = \"badge badge-dark\">\r\n                                    Gists: {public_gists}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Repos repos = {repos} />\r\n        </React.Fragment>\r\n    )\r\n}","import React, {useContext} from 'react'\r\nimport { AlertContext } from '../context/alert/alertContext'\r\n\r\nexport const Alert = () => {\r\n    const {alert} = useContext(AlertContext)\r\n    if (!alert) return null\r\n    return (\r\n        <div className={`alert alert-${alert.type || 'secondary'} alert-dismissible`} role=\"alert\">\r\n            {alert.text}\r\n            <button type=\"button\" className=\"close\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (state, action) => action.payload,\r\n    [HIDE_ALERT]: () => null,\r\n    default: state => state\r\n}\r\n\r\nexport const AlertReducer = (state, action) => {\r\n    const handler = handlers[action.type] || handlers.default\r\n    return handler(state, action)\r\n}","import React, { useReducer } from 'react'\r\nimport { AlertContext } from './alertContext'\r\nimport { AlertReducer, HIDE_ALERT, SHOW_ALERT } from './alertReducer'\r\n\r\nexport const AlertState = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AlertReducer, null)\r\n\r\n    const hide = () => dispatch({ type: HIDE_ALERT })\r\n    const show = (text, type = 'secondary') => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {type, text}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <AlertContext.Provider value = {{\r\n            hide, show, alert: state\r\n        }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    )\r\n}","export const CLEAR_USERS = 'CLEAR_USERS'\r\nexport const GET_REPOS = 'GET_REPOS'\r\nexport const GET_USER = 'GET_USER'\r\nexport const SEARCH_USERS = 'SEARCH_USERS'\r\nexport const SET_LOADING = 'SET_LOADING'\r\n\r\nconst handlers = {\r\n    [CLEAR_USERS]: (state) => ({\r\n        ...state,\r\n        users: [],\r\n        loading: false\r\n    }),\r\n    [GET_REPOS]: (state, {payload}) => ({\r\n        ...state,\r\n        repos: payload,\r\n        loading: false\r\n    }),\r\n    [GET_USER]: (state, {payload}) => ({\r\n        ...state,\r\n        user: payload,\r\n        loading: false\r\n    }),\r\n    [SEARCH_USERS]: (state, {payload}) => ({\r\n        ...state,\r\n        users: payload,\r\n        loading: false\r\n    }),\r\n    [SET_LOADING]: (state) => ({ \r\n        ...state,\r\n        loading: true\r\n    }),\r\n    default: state => state\r\n}\r\n\r\nexport const GithubReducer = (state, action) => {\r\n    const handler = handlers[action.type] || handlers.default\r\n    return handler(state, action)\r\n}","import React, {useReducer} from 'react'\r\nimport { GithubContext } from './githubcontext'\r\nimport { GithubReducer, SEARCH_USERS, GET_USER, GET_REPOS, CLEAR_USERS, SET_LOADING } from './githubReducer'\r\nimport Axios from 'axios'\r\n\r\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID\r\nconst CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET\r\nconst withCreds = (url) => {\r\n    return `${url}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\r\n}\r\n\r\nexport const GithubState = ({children}) => {\r\n    const initialState = {\r\n        user: {},\r\n        users: [],\r\n        loading: false,\r\n        repos: []\r\n    }\r\n    const [state, dispatch] = useReducer(GithubReducer, initialState) \r\n\r\n    const search  = async value => {\r\n        setLoading()\r\n        const response = await Axios.get(withCreds(`https://api.github.com/search/users?q=${value}&`))\r\n        dispatch({\r\n            type: SEARCH_USERS,\r\n            payload: response.data.items\r\n        })\r\n    }\r\n    const getUser = async name => {\r\n        setLoading()\r\n        const response = await Axios.get(withCreds(`https://api.github.com/users/${name}?`))\r\n        dispatch({\r\n            type: GET_USER,\r\n            payload: response.data\r\n        })\r\n    }\r\n    const getRepos = async name => {\r\n        setLoading()\r\n        const response = await Axios.get(withCreds(`https://api.github.com/users/${name}/repos?per_page=5&`))\r\n        dispatch({\r\n            type: GET_REPOS,\r\n            payload: response.data\r\n        })\r\n    }\r\n    const clearUsers = () => {\r\n        dispatch({\r\n            type: CLEAR_USERS\r\n        })\r\n    }\r\n    const setLoading = () => {\r\n        dispatch({\r\n            type: SET_LOADING\r\n        })\r\n    }\r\n    const {user, users, repos, loading} = state\r\n    return (\r\n        <GithubContext.Provider value={{\r\n            search, getRepos, getUser, clearUsers, setLoading, user, users, repos, loading\r\n        }}>\r\n            {children}\r\n        </GithubContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport { Navbar } from './components/Navbar';\nimport { Home } from './pages/Home';\nimport { About } from './pages/About';\nimport { Profile } from './pages/Profile';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Alert } from './components/Alert';\nimport { AlertState } from './context/alert/alertState';\nimport { GithubState } from './context/github/githubstate';\n\nfunction App() {\n  return (\n    <GithubState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar />\n          <div className=\"container pt-4\">\n            <Alert alert={{ text: \"Alert field\" }} />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/profile/:name\" component={Profile} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </GithubState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}